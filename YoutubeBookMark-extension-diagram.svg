<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than draw.io -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1677px" height="1533px" viewBox="-0.5 -0.5 1677 1533" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2024-08-23T17:44:13.897Z&quot; agent=&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/21.5.0 Chrome/112.0.5615.204 Electron/24.5.1 Safari/537.36&quot; etag=&quot;IM8dpzzwU1eIVSlSrA5H&quot; version=&quot;21.5.0&quot; type=&quot;device&quot;&gt;&lt;diagram name=&quot;Page-1&quot; id=&quot;vl-Y0o2oZoLHKTLHYsNQ&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 69 214 L 166 214 L 196 244 L 196 275 L 69 275 L 69 214 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 166 214 L 166 244 L 196 244 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 166 214 L 166 244 L 196 244" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 125px; height: 1px; padding-top: 221px; margin-left: 71px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">contentScript.js<br /><br />(() =&gt; {</div></div></div></foreignObject><text x="71" y="233" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">contentScript.js...</text></switch></g><path d="M 443.19 198 L 513.19 198 L 543.19 228 L 543.19 299 L 443.19 299 L 443.19 198 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 513.19 198 L 513.19 228 L 543.19 228 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 513.19 198 L 513.19 228 L 543.19 228" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 249px; margin-left: 444px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">background.js</div></div></div></foreignObject><text x="493" y="252" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">background.js</text></switch></g><path d="M 790 194 L 860 194 L 890 224 L 890 295 L 790 295 L 790 194 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 860 194 L 860 224 L 890 224 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 860 194 L 860 224 L 890 224" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 245px; margin-left: 791px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">popup.js</div></div></div></foreignObject><text x="840" y="248" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">popup.js</text></switch></g><rect x="6" y="327" width="253" height="242" rx="36.3" ry="36.3" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 251px; height: 1px; padding-top: 448px; margin-left: 8px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><br style="border-color: var(--border-color);" /><font color="#cc0000"><b>chrome.runtime.onMessage.addListener(){<br style="border-color: var(--border-color);" /></b></font><br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>const { type, value, videoId } = obj;<br style="border-color: var(--border-color);" /><br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>if (type == "<font color="#cc0000">NEW</font>") {<br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>currentVideo = videoId;<br style="border-color: var(--border-color);" /><font color="#cc0000"><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span><span style="">newVideoLoaded();</span><br style="border-color: var(--border-color);" /></font><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>}else if ( type == "PLAY"){<br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span><b><font color="#3333ff">youtubePlayer.currentTime= value;</font></b><br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>}else if (type == "DELETE"){<br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>c</span>urrentVideoBookmarks = currentVideo....<br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>chrome.storage.sync.set({ [currentVideo]: JSON.stringfy() })<br style="border-color: var(--border-color);" /><span style="border-color: var(--border-color);"><span style="white-space: pre;">    </span></span>}<br style="border-color: var(--border-color);" />}</div></div></div></foreignObject><text x="8" y="452" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">chrome.runtime.onMessage.addListener(){...</text></switch></g><rect x="0" y="632" width="481" height="283" rx="42.45" ry="42.45" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 479px; height: 1px; padding-top: 774px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="border-color: var(--border-color); text-align: left;"><font color="#cc0000">  const newVideoLoaded = async () =&gt; {</font></div><div style="border-color: var(--border-color); text-align: left;">    const bookmarkBtnExists = document.getElementsByClassName("bookmark-btn")[0];</div><div style="border-color: var(--border-color); text-align: left;"><br style="border-color: var(--border-color);" /></div><div style="border-color: var(--border-color); text-align: left;">    currentVideoBookmarks = await fetchBookmarks();</div><div style="border-color: var(--border-color); text-align: left;"><br style="border-color: var(--border-color);" /></div><div style="border-color: var(--border-color); text-align: left;">    if (!bookmarkBtnExists) {</div><div style="border-color: var(--border-color); text-align: left;">      const bookmarkBtn = document.createElement("img");</div><div style="border-color: var(--border-color); text-align: left;"><br style="border-color: var(--border-color);" /></div><div style="border-color: var(--border-color); text-align: left;">      bookmarkBtn.src = chrome.runtime.getURL("assets/bookmark.png");</div><div style="border-color: var(--border-color); text-align: left;">      bookmarkBtn.className = "ytp-button " + "bookmark-btn";</div><div style="border-color: var(--border-color); text-align: left;">      bookmarkBtn.title = "Click to bookmark current timestamp";</div><div style="border-color: var(--border-color); text-align: left;"><br style="border-color: var(--border-color);" /></div><div style="border-color: var(--border-color); text-align: left;">      youtubeLeftControls = document.getElementsByClassName("ytp-left-controls")[0];</div><div style="border-color: var(--border-color); text-align: left;">      youtubePlayer = document.getElementsByClassName('video-stream')[0];</div><div style="border-color: var(--border-color); text-align: left;"><br style="border-color: var(--border-color);" /></div><div style="border-color: var(--border-color); text-align: left;">      youtubeLeftControls.appendChild(bookmarkBtn);</div><div style="border-color: var(--border-color); text-align: left;">      bookmarkBtn.addEventListener("click", <font color="#cc0000">addNewBookmarkEventHandler</font>);</div><div style="border-color: var(--border-color); text-align: left;">    }</div><div style="border-color: var(--border-color); text-align: left;">  };</div></div></div></div></foreignObject><text x="241" y="777" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">const newVideoLoaded = async () =&gt; {...</text></switch></g><rect x="0" y="957" width="583" height="202" rx="30.3" ry="30.3" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 581px; height: 1px; padding-top: 1058px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>  const <font color="#cc0000">addNewBookmarkEventHandler</font> = async () =&gt; {</div><div>    const currentTime = youtubePlayer.currentTime;</div><div>    const newBookmark = {</div><div>      time: currentTime,</div><div>      desc: "Bookmark at " + getTime(currentTime),</div><div>    };</div><div><br /></div><div>    currentVideoBookmarks = await <font color="#cc0000">fetchBookmarks</font>();</div><div><br /></div><div>    chrome.storage.sync.set({</div><div>      [currentVideo]: JSON.stringify([...currentVideoBookmarks, newBookmark].sort((a, b) =&gt; a.time - b.time))</div><div>    });</div><div style="">  };</div></div></div></div></foreignObject><text x="2" y="1062" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const addNewBookmarkEventHandler = async () =&gt; {...</text></switch></g><rect x="109" y="1212" width="365" height="104" rx="15.6" ry="15.6" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 363px; height: 1px; padding-top: 1264px; margin-left: 111px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>  const <font color="#cc0000">fetchBookmarks</font> = () =&gt; {</div><div>    return new Promise((resolve) =&gt; {</div><div>      chrome.storage.sync.get([currentVideo], (obj) =&gt; {</div><div>        resolve(obj[currentVideo] ? JSON.parse(obj[currentVideo]) : []);</div><div>      });</div><div>    });</div><div>  };</div></div></div></div></foreignObject><text x="111" y="1268" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const fetchBookmarks = () =&gt; {...</text></switch></g><path d="M 132.5 569 L 235 628.79" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 239.53 631.44 L 231.72 630.93 L 235 628.79 L 235.25 624.89 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 279.83 915 L 289.79 950.86" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 291.2 955.92 L 285.95 950.12 L 289.79 950.86 L 292.7 948.24 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 291.5 1159 L 291.5 1205.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 291.5 1210.88 L 288 1203.88 L 291.5 1205.63 L 295 1203.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 132.5 275 L 132.5 320.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 132.5 325.88 L 129 318.88 L 132.5 320.63 L 136 318.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="293.69" y="345" width="399" height="172" rx="25.8" ry="25.8" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 397px; height: 1px; padding-top: 431px; margin-left: 296px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><b><font color="#cc0000">chrome.tabs.onUpdated.addListener((tabId, tab) =&gt; {</font></b></div><div>  if (<b><font color="#3333ff">tab.url &amp;&amp; tab.url.includes("youtube.com/watch"</font></b>)) {</div><div>    const queryParameters = tab.url.split("?")[1];</div><div>    const urlParameters = new URLSearchParams(queryParameters);</div><div><br /></div><div>    chrome.tabs.<font color="#cc0000">sendMessage(tabId, {</font></div><div><font color="#cc0000">      type: "NEW"</font>,</div><div>      videoId: urlParameters.get("v"),</div><div>    });</div><div>  }</div><div>});</div><div><br /></div></div></div></div></foreignObject><text x="296" y="435" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">chrome.tabs.onUpdated.addListener((tabId, tab) =&gt; {...</text></switch></g><path d="M 493.19 299 L 493.19 338.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 493.19 343.88 L 489.69 336.88 L 493.19 338.63 L 496.69 336.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="775" y="372" width="512" height="284" rx="42.6" ry="42.6" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 510px; height: 1px; padding-top: 514px; margin-left: 777px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><b><font color="#cc0000">document.addEventListener("DOMContentLoaded", async () =&gt; {</font></b></div><div>  const activeTab = await getActiveTabURL();</div><div>  const queryParameters = activeTab.url.split("?")[1];</div><div>  const urlParameters = new URLSearchParams(queryParameters);</div><div><br /></div><div>  const currentVideo = urlParameters.get("v");</div><div><br /></div><div>  if (<b><font color="#cc0000">activeTab.url.includes("youtube.com/watch") &amp;&amp; currentVideo</font></b>) {</div><div>    chrome.storage.sync.get([currentVideo], (data) =&gt; {</div><div>      const currentVideoBookmarks = data[currentVideo] ? JSON.parse(data[currentVideo]) : [];</div><div><br /></div><div><font color="#cc0000"><b>      viewBookmarks(currentVideoBookmarks);</b></font></div><div>    });</div><div>  } else {</div><div>    const container = document.getElementsByClassName("container")[0];</div><div><br /></div><div>    container.innerHTML = '&lt;div class="title"&gt;This is not a youtube video page.&lt;/div&gt;';</div><div>  }</div><div>});</div></div></div></div></foreignObject><text x="777" y="518" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">document.addEventListener("DOMContentLoaded", async () =&gt; {...</text></switch></g><path d="M 1180 147 L 1268 147 L 1282 161 L 1282 222 L 1180 222 L 1180 147 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1268 147 L 1268 161 L 1282 161 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 1268 147 L 1268 161 L 1282 161" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 100px; height: 1px; padding-top: 185px; margin-left: 1181px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">util.js</div></div></div></foreignObject><text x="1231" y="188" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">util.js</text></switch></g><rect x="1180" y="237" width="240" height="120" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 238px; height: 1px; padding-top: 297px; margin-left: 1182px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>export async function getActiveTabURL() {</div><div>    const tabs = await chrome.tabs.query({</div><div>        currentWindow: true,</div><div>        active: true</div><div>    });</div><div>  </div><div>    return tabs[0];</div><div>}</div></div></div></div></foreignObject><text x="1182" y="301" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">export async function getActiveTabURL()...</text></switch></g><rect x="774" y="708" width="430" height="233" rx="34.95" ry="34.95" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 428px; height: 1px; padding-top: 825px; margin-left: 776px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>const <font color="#cc0000"><b>viewBookmarks</b></font> = (currentBookmarks=[]) =&gt; {</div><div>  const bookmarksElement = document.getElementById("bookmarks");</div><div>  bookmarksElement.innerHTML = "";</div><div><br /></div><div>  </div><div>  if (currentBookmarks.length &gt; 0) {</div><div>    for (let i = 0; i &lt; currentBookmarks.length; i++) {</div><div>      const bookmark = currentBookmarks[i];</div><div>      <font color="#cc0000"><b>addNewBookmark</b></font>(bookmarksElement, bookmark);</div><div>    }</div><div>  } else {</div><div>    bookmarksElement.innerHTML = '&lt;i class="row"&gt;No bookmarks to show&lt;/i&gt;';</div><div>  }</div><div><br /></div><div>  return;</div><div>};</div></div></div></div></foreignObject><text x="776" y="828" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const viewBookmarks = (currentBookmarks=[]) =&gt; {...</text></switch></g><path d="M 1031 656 L 993 703.05" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 989.7 707.13 L 991.38 699.49 L 993 703.05 L 996.82 703.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="792" y="983" width="368" height="305" rx="45.75" ry="45.75" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 366px; height: 1px; padding-top: 1136px; margin-left: 794px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>const <font color="#cc0000"><b>addNewBookmark</b></font> = (bookmarks, bookmark) =&gt; {</div><div>  const bookmarkTitleElement = document.createElement("div");</div><div>  const controlsElement = document.createElement("div");</div><div>  const newBookmarkElement = document.createElement("div");</div><div><br /></div><div>  bookmarkTitleElement.textContent = bookmark.desc;</div><div>  bookmarkTitleElement.className = "bookmark-title";</div><div>  controlsElement.className = "bookmark-controls";</div><div><br /></div><div><b>  <font color="#cc0000">setBookmarkAttributes("play", onPlay, controlsElement);</font></b></div><div><b> <font color="#cc0000"> setBookmarkAttributes("delete", onDelete, controlsElement);</font></b></div><div><br /></div><div>  newBookmarkElement.id = "bookmark-" + bookmark.time;</div><div>  newBookmarkElement.className = "bookmark";</div><div>  newBookmarkElement.setAttribute("timestamp", bookmark.time);</div><div><br /></div><div>  newBookmarkElement.appendChild(bookmarkTitleElement);</div><div>  newBookmarkElement.appendChild(controlsElement);</div><div>  bookmarks.appendChild(newBookmarkElement);</div><div>};</div></div></div></div></foreignObject><text x="794" y="1139" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const addNewBookmark = (bookmarks, bookmark) =&gt; {...</text></switch></g><rect x="499" y="1360" width="315" height="143" rx="21.45" ry="21.45" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 313px; height: 1px; padding-top: 1431px; margin-left: 501px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>const <b><font color="#cc0000">setBookmarkAttributes</font></b> =  (src, eventListener, controlParentElement) =&gt; {</div><div>  const controlElement = document.createElement("img");</div><div><br /></div><div>  controlElement.src = "assets/" + src + ".png";</div><div>  controlElement.title = src;</div><div>  controlElement.addEventListener("click", eventListener);</div><div>  controlParentElement.appendChild(controlElement);</div><div>};</div></div></div></div></foreignObject><text x="501" y="1435" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const setBookmarkAttributes =  (src, eventListener,...</text></switch></g><rect x="830.5" y="1360" width="317" height="145" rx="21.75" ry="21.75" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 315px; height: 1px; padding-top: 1433px; margin-left: 833px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>const <b><font color="#cc0000">onPlay</font></b> = async e =&gt; {</div><div>  const bookmarkTime = e.target.parentNode.parentNode.getAttribute("timestamp");</div><div>  const activeTab = await getActiveTabURL();</div><div><br /></div><div>  <b><font color="#cc0000">chrome.tabs.sendMessage(activeTab.id, {</font></b></div><div><b><font color="#cc0000">    type: "PLAY",</font></b></div><div><b><font color="#cc0000">    value: bookmarkTime,</font></b></div><div>  });</div><div>};</div></div></div></div></foreignObject><text x="833" y="1436" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const onPlay = async e =&gt; {...</text></switch></g><rect x="1164" y="1324" width="450" height="207" rx="31.05" ry="31.05" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 448px; height: 1px; padding-top: 1428px; margin-left: 1166px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>const <font color="#cc0000"><b>onDelete</b></font> = async e =&gt; {</div><div>  const activeTab = await getActiveTabURL();</div><div>  const bookmarkTime = e.target.parentNode.parentNode.getAttribute("timestamp");</div><div>  const bookmarkElementToDelete = document.getElementById(</div><div>    "bookmark-" + bookmarkTime</div><div>  );</div><div><br /></div><div>  bookmarkElementToDelete.parentNode.removeChild(bookmarkElementToDelete);</div><div><br /></div><div>  chrome.tabs.sendMessage(activeTab.id, {</div><div>    type: "DELETE",</div><div>    value: bookmarkTime,</div><div>  }, viewBookmarks);</div><div>};</div></div></div></div></foreignObject><text x="1166" y="1431" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">const onDelete = async e =&gt; {...</text></switch></g><path d="M 976 1288 L 662.71 1358.6" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 657.59 1359.75 L 663.65 1354.8 L 662.71 1358.6 L 665.19 1361.63 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 976 1288 L 1158.23 1373.06" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1162.99 1375.28 L 1155.16 1375.49 L 1158.23 1373.06 L 1158.12 1369.14 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 976 1288 L 987.87 1353.73" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 988.8 1358.9 L 984.11 1352.63 L 987.87 1353.73 L 991 1351.39 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 989 941 L 977.88 976.92" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 976.33 981.93 L 975.06 974.21 L 977.88 976.92 L 981.74 976.28 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 989 1505 L 262.62 453.24" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 259.64 448.92 L 266.49 452.69 L 262.62 453.24 L 260.73 456.67 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="925" y="0" width="60" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 15px; margin-left: 926px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Click the extension</div></div></div></foreignObject><text x="955" y="19" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Click the...</text></switch></g><rect x="895" y="63" width="120" height="60" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 93px; margin-left: 896px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">popup.html</div></div></div></foreignObject><text x="955" y="97" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">popup.html</text></switch></g><path d="M 955 30 L 955 56.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 955 61.88 L 951.5 54.88 L 955 56.63 L 958.5 54.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 955 123 L 845.42 190.65" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 840.95 193.41 L 845.07 186.76 L 845.42 190.65 L 848.75 192.71 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 840 295 L 1025.09 369.62" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1029.96 371.58 L 1022.16 372.21 L 1025.09 369.62 L 1024.78 365.72 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="905" y="213.5" width="150" height="70" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 249px; margin-left: 906px;"><div data-drawio-colors="color: #3333FF; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 255); line-height: 1.2; pointer-events: all; font-weight: bold; white-space: normal; overflow-wrap: normal;">Show the tab named folders and list of attachmented saved, clickable, once click, go to google drive folder.<br /><br />Provide file name and delete option</div></div></div></foreignObject><text x="980" y="252" fill="#3333FF" font-family="Helvetica" font-size="12px" text-anchor="middle" font-weight="bold">Show the tab named folder...</text></switch></g><rect x="555" y="222" width="150" height="70" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 257px; margin-left: 556px;"><div data-drawio-colors="color: #3333FF; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 255); line-height: 1.2; pointer-events: all; font-weight: bold; white-space: normal; overflow-wrap: normal;">Once the page is updated, send NEW messaeg.</div></div></div></foreignObject><text x="630" y="261" fill="#3333FF" font-family="Helvetica" font-size="12px" text-anchor="middle" font-weight="bold">Once the page is updated,...</text></switch></g><rect x="206" y="161" width="162" height="148" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 160px; height: 1px; padding-top: 235px; margin-left: 207px;"><div data-drawio-colors="color: #3333FF; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 255); line-height: 1.2; pointer-events: all; font-weight: bold; white-space: normal; overflow-wrap: normal;">If receive NEW message, add upload icon behind all attachment file. Users can manually click "Sync". Those synced also need to show synced status.<br />If receive Delete message? Then the status on the gmail page should also change too.</div></div></div></foreignObject><text x="287" y="239" fill="#3333FF" font-family="Helvetica" font-size="12px" text-anchor="middle" font-weight="bold">If receive NEW message, add...</text></switch></g><rect x="1352" y="375" width="323" height="277" rx="41.55" ry="41.55" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 321px; height: 1px; padding-top: 513px; margin-left: 1354px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">if (<b style="border-color: var(--border-color);"><font color="#cc0000" style="border-color: var(--border-color);">activeTab.url.includes("mail.google.com/") &amp;&amp; currentVideo</font></b>) {<br />chrome.storage.sync.get([currentUserId], (data) =&gt; {<br /><span style=""><span style="">    </span></span>const currentRootFolder = data[currentUserId] ? JSON.parse(data[CurrentUserId]) : []; })<br /><br />viewFolderLists(currentRootFolder);<br /><div style="border-color: var(--border-color);">    </div><div style="border-color: var(--border-color);">});</div><div style="border-color: var(--border-color);">  } else {</div><div style="border-color: var(--border-color);">    const container = document.getElementsByClassName("container")[0];</div><div style="border-color: var(--border-color);"><br style="border-color: var(--border-color);" /></div><div style="border-color: var(--border-color);">    container.innerHTML = '&lt;div class="title"&gt;This is not a youtube video page.&lt;/div&gt;';</div><div style="border-color: var(--border-color);">  }</div></div></div></div></foreignObject><text x="1354" y="517" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">if (activeTab.url.includes("mail.google.com/") &amp;&amp; curr...</text></switch></g><rect x="1352" y="715" width="264" height="139" rx="20.85" ry="20.85" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 262px; height: 1px; padding-top: 784px; margin-left: 1354px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">cosnt viewFolderLists = (currentRootFolder = []){<br /><br /><br /><br />}</div></div></div></foreignObject><text x="1354" y="788" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">cosnt viewFolderLists = (currentRootFolder =...</text></switch></g><rect x="570" y="1235" width="120" height="60" rx="9" ry="9" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>